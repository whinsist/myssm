<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2018 Cloud-Star, Inc. All Rights Reserved.
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <context:property-placeholder order="1" ignore-unresolvable="true"
                                  location="classpath:mq.properties"/>

    <!--配置connection-factory，指定连接rabbit server参数-->
    <rabbit:connection-factory id="connectionFactory" username="${mq-user}"
                               password="${mq-password}"
                               host="${mq-server}"
                               port="${mq-port}"
                               virtual-host="/"/>

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成-->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!--定义queue-->
    <rabbit:queue id="host-log" name="host-log"/>
    <rabbit:queue id="app-log" name="app-log"/>
    <rabbit:queue id="cluster-log" name="cluster-log"/>

    <!-- 定义direct exchange，绑定queue -->
    <rabbit:direct-exchange name="cloudExchange">
        <rabbit:bindings>
            <rabbit:binding queue="cluster-log" key="log.cluster"/>
            <rabbit:binding queue="host-log" key="log.host"/>
            <rabbit:binding queue="app-log" key="log.app"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 定时任务队列-->
    <rabbit:queue id="schedule_queue" name="schedule_queue"/>
    <rabbit:topic-exchange name="schedule_exchange">
        <rabbit:bindings>
            <rabbit:binding queue="schedule_queue" pattern="op.*"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    <rabbit:template id="scheduleAmqpTemplate" message-converter="jackson2JsonMessageConverter"
                     connection-factory="connectionFactory" exchange="schedule_exchange"
                     retry-template="retryTemplate" reply-timeout="15000"/>

    <!--定义rabbit template用于数据的接收和发送-->
    <rabbit:template id="cloudAmqpTemplate" message-converter="jackson2JsonMessageConverter"
                     connection-factory="connectionFactory" exchange="cloudExchange"
                     retry-template="retryTemplate"/>

    <!-- ansible 相关通信通道定义 -->
    <rabbit:queue id="platform.log.control" name="platform.log.control"/>
    <rabbit:queue id="platform.syncenv.control" name="platform.syncenv.control"/>
    <rabbit:queue id="platform.syncscript.control" name="platform.syncscript.control"/>
    <!-- 绑定exchange与queue -->
    <rabbit:topic-exchange name="ansible.control.platform">
        <rabbit:bindings>
            <rabbit:binding queue="platform.log.control" pattern="platform.log.control.*"/>
            <rabbit:binding queue="platform.syncenv.control" pattern="syncenv.*"/>
            <rabbit:binding queue="platform.syncscript.control" pattern="syncscript.*"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>


    <!--设置重试策略-->
    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="5000"/>
                <property name="maxInterval" value="120000"/>
                <property name="multiplier" value="2"/>
            </bean>
        </property>
        <property name="retryPolicy">
            <bean class="org.springframework.retry.policy.SimpleRetryPolicy">
                <property name="maxAttempts" value="2"/>
            </bean>
        </property>
    </bean>

    <bean id="jackson2JsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

</beans>
